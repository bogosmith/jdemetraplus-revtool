/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.nbdemetra.ra.descriptive;

import ec.nbdemetra.ra.ui.view.VintageTsProcessingViewer;
import ec.nbdemetra.ra.ws.WorkspaceRevisionTopComponent;
import ec.nbdemetra.ws.WorkspaceFactory;
import ec.nbdemetra.ws.WorkspaceItem;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 *
 * @author aresda
 */
@ConvertAsProperties(dtd = "-//ec.nbdemetra.ra.descriptive//Descriptive//EN",
autostore = false)
@TopComponent.Description(preferredID = "DescriptiveTopComponent",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DescriptiveAction")
@ActionID(category = "Revision Analysis", id = "ec.nbdemetra.ra.descriptive.DescriptiveDocumentManager")
@ActionReference(path = "Menu/Statistical methods/Revision Analysis", position = 1500)
@NbBundle.Messages({
    "CTL_DescriptiveAction=New Descriptive Document",
    "CTL_DescriptiveTopComponent=Descriptive Window",
    "HINT_DescriptiveTopComponent=This is a Descriptive window"
})
public final class DescriptiveTopComponent extends WorkspaceRevisionTopComponent<DescriptiveDocument> {
          
    private static DescriptiveDocumentManager manager() {
        return WorkspaceFactory.getInstance().getManager(DescriptiveDocumentManager.class);
    }
    
    public DescriptiveTopComponent() {
        super(manager().create(WorkspaceFactory.getInstance().getActiveWorkspace()));
        initDocument();
    }

    public DescriptiveTopComponent(WorkspaceItem<DescriptiveDocument> doc) {
        super(doc);
        initDocument();
    }
    
     private void initDocument() {
        initComponents();
        setToolTipText(NbBundle.getMessage(DescriptiveTopComponent.class, "HINT_DescriptiveTopComponent"));
        panel = VintageTsProcessingViewer.create(getDocument().getElement());
        this.add(panel);
        setName(getDocument().getDisplayName());
        panel.refreshHeader();

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        setLayout(new java.awt.BorderLayout());        
    }// </editor-fold>

    // Variables declaration - do not modify
    // End of variables declaration

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    protected String getContextPath() {
        return DescriptiveDocumentManager.CONTEXTPATH;
    }
    
}
